class HtmlRuby::Parser
rule
  # Parsing starts here.
  template:
    tags                        { return Template.new(val[0]) }

  tags:
    tag                         { return [ val[0] ] }
  | tags tag                    { val[0].push(val[1]) }

  tag:
    IDENTIFIER '{' tags '}'     { return Tag.new(val[0], [], val[2])   }
  | IDENTIFIER '{' '}'          { return Tag.new(val[0], [], [])       }
  | IDENTIFIER value            { return Tag.new(val[0], [], [val[1]]) }
  | IDENTIFIER attributes '{' tags '}'     { return Tag.new(val[0], val[1], val[3])   }
  | IDENTIFIER attributes '{' '}'          { return Tag.new(val[0], val[1], [])       }
  | IDENTIFIER attributes value            { return Tag.new(val[0], val[1], [val[2]]) }
  | value

  attributes:
  | attribute                   { return [ val[0] ] }
  | attributes attribute        { val[0].push(val[1]) }

  attribute:
    ID                          { return Attribute.new("id", val[0].gsub("#", "") ) }
  | CLASS                       { return Attribute.new("class", val[0].gsub(".", "")) }

  value:
    STRING                      { return Text.new(val[0]) }
  | EXPRESSION                  { return Expression.new(val[0]) }
  | STATEMENT                   { return Statement.new(val[0]) }
end
---- header ----
require_relative 'template'
require_relative 'tag'
require_relative 'text'
require_relative 'expression'
require_relative 'statement'
require_relative 'parser.rex'
---- inner ----
---- footer ----
